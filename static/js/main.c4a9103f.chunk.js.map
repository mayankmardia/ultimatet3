{"version":3,"sources":["index.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","Square","color","activeboard","val","game_no","square_no","onClick","console","log","toString","Game","winner","board","className","map","square_val","MetaGame","useState","Array","fill","boardOfBoards","setBoardOfBoards","setActiveBoard","xIsNext","setXIsNext","resultsOfBoards","setResultsOfBoards","status","setStatus","every","copyBoardOfBoards","copySingleGame","copyResultsOfBoards","TotalWinner","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c4a9103f.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\nfunction Square({color, activeboard, val, game_no, square_no, onClick}) {\n  console.log(\"Entrance Square function:\");\n  console.log(game_no, square_no, val)\n  return (\n    <button color = {color} activeboard = {activeboard.toString()} onClick = {() => onClick(game_no, square_no)}>{val}</button>\n  )\n}\n\n\nfunction Game({winner, board, activeboard, game_no, onClick}) {\n  console.log(\"Entrance Game function:\");\n  return (\n   <>\n   <div className = \"board\">\n    {board.map((square_val, square_no) => {\n      return <Square color={winner} activeboard={activeboard} val={square_val} game_no={game_no} square_no={square_no} onClick={onClick}/>\n    })}\n    </div>\n   </>\n  );\n}\n\nfunction MetaGame() {\n  console.log(\"Entrance Metagame function:\");\n  const [boardOfBoards, setBoardOfBoards] = useState(Array(9).fill(Array(9).fill(null)));\n  const [activeboard, setActiveBoard] = useState(null);\n  const [xIsNext, setXIsNext] = useState(true); \n  const [resultsOfBoards, setResultsOfBoards] = useState(Array(9).fill(null));\n  const [status, setStatus] = useState(\"X's move\");\n\n  function onClick(game_no, square_no) {\n    console.log(\"registered click onClick in metagame at\", game_no, square_no);\n    console.log(\"value at that place is:\", boardOfBoards[game_no][square_no]);\n    if (boardOfBoards[game_no].every((val) => (val !== null))) {\n      setActiveBoard(null);\n      return;\n    }\n\n    if (boardOfBoards[game_no][square_no]) {\n      console.log('square is in=active');\n      return; \n    }\n\n    if ((activeboard !== null) && (activeboard !== game_no)) {\n      console.log('board is in=active');\n      return;\n    }\n\n    const copyBoardOfBoards = [...boardOfBoards];\n    const copySingleGame = [...copyBoardOfBoards[game_no]];\n\n    const copyResultsOfBoards = [...resultsOfBoards];\n\n    console.log(\"value at that place is:\", boardOfBoards[game_no][square_no]);\n    console.log(\"value at that place is:\", copyBoardOfBoards[game_no][square_no]);\n    copySingleGame[square_no] = xIsNext ? 'X' : 'O';  \n    console.log(\"value at that place is:\", boardOfBoards[game_no][square_no]);\n    console.log(\"value at that place is:\", copyBoardOfBoards[game_no][square_no]);\n    copyBoardOfBoards[game_no] = copySingleGame;\n\n    const winner = calculateWinner(copyBoardOfBoards[game_no]);\n\n    if (winner) {\n      copyResultsOfBoards[game_no] = winner; \n    }\n\n    const TotalWinner = calculateWinner(copyResultsOfBoards);\n    \n    if (TotalWinner) {\n      setStatus(\"Winner is \" + (xIsNext ? \"X\" : \"O\"));\n    }\n    else {\n      setStatus((!xIsNext ? \"X\" : \"O\") + \"'s move\");\n    }\n\n\n    setBoardOfBoards(copyBoardOfBoards);\n    setResultsOfBoards(copyResultsOfBoards);\n    setActiveBoard(square_no);\n    setXIsNext(!xIsNext);\n  }\n\n\n  return (\n    <>\n      <h1>{status}</h1>\n      <div className = \"boards\">\n      {boardOfBoards.map((board, game_no) => {\n        return <Game winner={resultsOfBoards[game_no]} activeboard={game_no === activeboard} board={board} game_no={game_no} onClick={onClick}/>\n      })}\n      </div>\n    </>\n  )\n}\n\n\nfunction App() {\n  return (\n    <MetaGame/>\n  );\n}\n\nReactDOM.render(\n    <App/>, document.getElementById('root')\n); "],"sourceRoot":""}